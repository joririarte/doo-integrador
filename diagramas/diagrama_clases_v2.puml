@startuml
title Diagrama de Clases - Sistema de Ventas

' Clases
package modelo {
   abstract class Persona {
    -nombreApellido: String
    -tipoDocumento: String
    -nroDocumento: String
    -CUIT: String
    -condicionAfip: String
    -genero: String
    -fechaNacimiento: Date
    -domicilio: String
    -email: String
    -telefonos: List<String>
  }

  class Cliente {
    -nro_cliente: String
    +listarClientes(): List<Cliente>
    +consultarCliente(params: List<String>): List<Cliente>
    +registrarCliente(): Cliente
    +actualizarCliente(params: List<String> ): Cliente
    +eliminarCliente(): Cliente
  }

  class Empleado {
    -cargo: String
    
    +generarInformeVentaDiaria(): void
    +generarInformeVentaCajero(c: Empleado): void
    +generarInformeStockGeneral(): void
    +generarInformeStockProducto(p: Producto): void

    +listarEmpleados(): List<Empleado>
    +consultarEmpleado(params: List<String>): List<Empleado>
    +registrarEmpleado(): Empleado
    +actualizarEmpleado(params: List<String> ): Empleado
    +eliminarEmpleado(): Empleado
  }

  class Usuario {
    -username: String
    -password: String
    -ultimoAcceso: String
    -empleado: Empleado
    
    +iniciarSesion(): Usuario
  }

  class Venta {
    -vendedor: Empleado
    -fecha: Date
    -estado: String
    -montoPagado: float
    -medioPago: MedioPago
    -cliente: Cliente
    -detalleVenta: List<DetalleVenta>
    
    +calcularMontoTotal(): float
    +calcularVuelto(): float
    +setCliente(): void
    +agregarDetalleProducto(): void
    +obtenerMedioPago(): MedioPago
    +cobrar(): void
    +checkCobro(): Boolean
    +cancelar(): void
  }

  class MedioPago {
    -nombre: String
    -descuentoRecargo: DescuentoRecargo
    -habilitado: boolean
    -fechaHabilitadoDesde: Date
    -fechaHabilitadoHasta: Date
    
    +checkFechaFin(): Boolean
    +deshabilitar(): void
    +habilitar(): void
    +checkFechaInicio()
  }

  abstract class DescuentoRecargo {
    -nombre: String
    -tipo: String
    -monto: float
    -fechaInicio: Date
    -fechaFin: Date
    -habilitado: boolean
    +calcular(monto: float) : float
  }

  class Descuento{

  }

  class Recargo{

  }

  class DetalleVenta {
    -nombre: String
    -cantidad: int
    -precioVenta: float
    -producto: Producto
    +calcularSubtotal(): float
  }

  class Producto {
    -nombre: String
    -Stock: List<Stock>
    -precio: List<Precio>
    -Marca: String
    -codigoBarras: String
    +buscarProducto(codigoBarras : String): Boolean
    +registrarProducto(p: Producto): Boolean
    +actualizarProducto(p: Producto): Boolean
    +eliminarProducto(codigoBarras: String): Boolean
  }

  class Precio {
    -monto: float
    -fecha: Date
    +getPrecio(): float
    +getPrecio(fecha: Date): float
  }

  class Stock {
    -cantidad: float
    -fecha: Date
    +setStock(cantidad: float): void
    +getStock(): float
    +getStock(fecha: Date): float
  }

  abstract class modelo{
    +dao : Dao 
  }

  ' Relaciones

  Persona <|-- Cliente
  Persona <|-- Empleado
  Usuario "1" --> "0..1" Empleado
  Cliente "1" --> "0..*" Venta
  Empleado "1" --> "0..*" Venta : vendedor
  Venta "0..*" --> "1" MedioPago
  MedioPago "1" --> "0..*" DescuentoRecargo
  Venta "1" --> "0..*" DetalleVenta
  DetalleVenta "1..*" --> "1" Producto
  Producto "1" --> "1..*" Precio
  Producto "1" --> "1..*" Stock

  Descuento --|> DescuentoRecargo
  Recargo --|> DescuentoRecargo

  Persona --|> modelo
  Usuario --|> modelo
  Venta --|> modelo
  MedioPago --|> modelo
  DescuentoRecargo --|> modelo
  DetalleVenta --|> modelo
  Producto --|> modelo
  Precio --|> modelo
  Stock --|> modelo
}

@enduml
